package org.optaconf.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import org.optaconf.domain.Day;
import org.optaconf.domain.Room;
import org.optaconf.domain.UnavailableTimeslotRoomPenalty;
import org.optaconf.domain.Conference;
import org.optaconf.domain.Talk;
import org.optaconf.domain.TalkExclusion;
import org.optaconf.domain.TalkExclusionType;
import org.optaconf.domain.Timeslot;
import org.optaconf.domain.Speaker;
import org.optaconf.domain.SpeakingRelation;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "roomConflict"
    when
        Talk($id: id, $timeslot : timeslot, $room : room)
        Talk(id > $id, timeslot == $timeslot, room == $room)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "unavailableTimeslotRoomPenalty"
    when
        UnavailableTimeslotRoomPenalty($timeslot : timeslot, $room : room)
        Talk(timeslot == $timeslot, room == $room)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "speakerConflict"
    when
        $leftTalk : Talk($id: id, $timeslot : timeslot)
        SpeakingRelation(talk == $leftTalk, $speaker : speaker)
        $rightTalk : Talk(id > $id, timeslot == $timeslot)
        SpeakingRelation(talk == $rightTalk, speaker == $speaker)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//rule "talkExclusionHard"
//    when
//        TalkExclusion(type == TalkExclusionType.HARD_CONFLICT, $t1 : firstTalk, $t2 : secondTalk)
//        Talk(this == $t1, $ts : timeslot, $r : room)
//        Talk(this == $t2, timeslot == $ts, room == $r)
//    then
//        scoreHolder.addHardConstraintMatch(kcontext, -1);
//end

// ############################################################################
// Soft constraints
// ############################################################################

//rule "talkExclusionSoft"
//    when
//        TalkExclusion(type == TalkExclusionType.SOFT_CONFLICT, $t1 : firstTalk, $t2 : secondTalk)
//        Talk(this == $t1, $ts : timeslot, $r : room)
//        Talk(this == $t2, timeslot == $ts, room == $r)
//    then
//        scoreHolder.addSoftConstraintMatch(kcontext, -1);
//end

rule "trackConflict"
    when
        Talk($id: id, $track : track, $timeslot : timeslot)
        Talk(id > $id, track == $track, timeslot == $timeslot)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -1);
end
